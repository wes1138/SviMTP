# SviMTP Readme


## Introduction

This plugin enables you to send a quick email directly from Vim, using SMTP
over an SSL connection.  Why would anyone want to do that?  Who knows -- maybe
I'm the only one. I find it faster, and I like the continuity of not having to
leave Vim.

## Installation

If you have the [pathogen] plugin, you can just put the root (`svimtp`) under
`.vim/bundle`.  Else, copy `mail_svimtp.vim` to the directory
`.vim/after/ftplugin/`, and `indent/mail.vim` to the corresponding
`.vim/indent/mail.vim`.

## Usage

This plugin works for the `mail` filetype.  Once you have a `mail` buffer
open, simply
compose your email, including at least a `To:` header (see the formatting
remarks below), and send the message with the command `:SendMailSSL()`, using
your current SMTP settings.


## Features

* Markdown support to send messages as html.
* Runs SMTP over SSL using python's [smtplib].
* Auto-completes email addresses with `<c-x><c-u>`.
* Works well with [supertab], providing a custom completion context (attempts
  email address completion only if you are on a `To,cc` or `bcc` line;
  otherwise uses your usual supertab completion settings.)
* Provides improved indentation when composing mail headers.
* Attach files using shell globs.

## Configuration / Setup

### Basic Setup

There are a few configuration files needed to make full use of the plugin,
described below:

1. `~/.svimtp`.  This contains your SMTP settings in a simple format. Here is
   an example:

		host = smtp.gmail.com
		username = me@gmail.com
		password = abc123
		replyto = me@gmail.com
	*Remarks*:  The `replyto` field is the default `From:`.  Spaces around the
	`=` are necessary (thanks to lazy programming o.o).

1. `~/.svimtp_addrs`.  This contains the list of email addresses you'd like to
   be able to auto-complete, one per line.  You can include "friendly names"
   or not.  Some examples:

		Saunders Mac Lane <sml@categories.net>
		gauss@lemma.com
		<random.address@somewhere.net>
	You'll probably want to import this list from elsewhere.   If you use
	[gmail to export them to a csv][gmailExport] in the "google csv format",
	then something like this will get you close to what you want (as of
	January 2012):
	
		awk -F, 'NR!=1 {print $1" <"$29">"}' < google.csv > .svimtp_addrs

	Or if your computer isn't unicode friendly, maybe somethink like:

		iconv -f UTF-16 -t ISO-8859-1 google.csv | awk -F, ...


### Recommendations

1. Make a skeleton for emails.  `skeleton.mail` has something minimal.  If you
   are unfamiliar, see `:h skeleton` for how to make it work.

1. Make `.mail` files have the mail filetype:

		au! BufRead,BufNewFile *.mail setfiletype mail

1. A mapping, maybe like this:

		nnoremap <F12> :sp ~/temp_svimtp_message.mail<CR>A



### Dependencies

Required:

* Python (tested with python 2.7).
* Compile Vim with `+python`

Optional:

* [supertab]
* markdown (e.g. [pandoc])
* awk (used for the markdown feature)


## Message Formatting

The buffer has to have a well-formed email.  See RFCs (822,2822,...), or just
use the following example as a guide:

  		To: recipient1@aaa.com, recipient2@bbb.com,
			recipient3@ccc.com
		Subject: Test message.

		This is the body of the email.  Note that there's a **blank line**
		above it to separate it from the headers, and that the headers do
		not contain any blank lines.


## Attachments

Attachments are also supported, via the following commands:

* `:AttachFile <filename>`  You can use shell globs in the file name (to the
  limited extent that they are supported by python's glob functionality.)
* `:PopAttachment`  Select attachment to remove from a list.
* `:ShowAttachments`  Show list of attachments in the location list.  (Note:
  globs are not yet expanded.)

Given the limitations of the shell globbing from python, I would recommend
something like the following in your .bashrc:

	# open vim in mail mode with attachment list from shell glob:
	vmail() {
		local tfname=$(mktemp -u --suffix=".mail")
		if (( $# > 0 )); then
			vim -n -c "startinsert!" -c "AttachFile $*" -- "$tfname"
		else
			vim -n -c "startinsert!" -- "$tfname"
		fi
	}

Then you could use more fancy shell globs, e.g. `vmail pictures/{1..10}.jpg`.


## Markdown

If you have markdown, you can send fancy html versions of your email
as an alternative to the plain text.  Just type the message body using
[markdown constructs][markdownwiki], and send as usual, except call
`SendMail_SSL(1,1)` (parameter 2 says to try markdown).  The default mapping
for this is `<localleader><localleader>S`.  To configure the path, and the
command line arguments to markdown, just edit the `s:markdown` variable in
`mail_svimtp.vim`.  Defaults to
`/usr/local/bin/pandoc -s -S -f markdown -t html`.

**NOTE:** a lot of mail clients have spotty support for html and css, so don't
be surprised if it doesn't look quite the same as it would in your browser.
E.g., gmail will not make use of much (any?) of the css embedded in the file.


## References

* [Gmail SMTP setup][gmail]
* [Application-specific passwords for Gmail][gmailApppwd]
* [Original email formatting](https://tools.ietf.org/html/rfc822)
* [Python shell globbing](https://docs.python.org/2/library/glob.html)


<!--  links  -->

[gmail]: http://support.google.com/mail/bin/answer.py?hl=en&answer=13287
[supertab]: http://www.vim.org/scripts/script.php?script_id=1643
[smtplib]: http://docs.python.org/library/smtplib.html
[pathogen]: http://www.vim.org/scripts/script.php?script_id=2332
[gmailExport]: http://support.google.com/mail/bin/answer.py?hl=en&answer=24911
[gmailApppwd]: http://support.google.com/accounts/bin/static.py?hl=en&page=guide.cs&guide=1056283&answer=185833
[pandoc]: http://johnmacfarlane.net/pandoc/
[pandocreadme]: http://johnmacfarlane.net/pandoc/README.html
[markdownwiki]: https://en.wikipedia.org/wiki/Markdown
